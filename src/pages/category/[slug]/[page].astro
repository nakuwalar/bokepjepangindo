---
// src/pages/category/[slug]/[page].astro
import Layout from '../../../layouts/BaseLayout.astro';
import VideoCard from '../../../components/VideoCard.astro';
import { getAllVideos, type VideoData } from '../../../utils/data.ts';
import { slugify } from '../../../utils/slugify';
import { nama, url } from '../../../utils/site.ts';

export const prerender = true;

export async function getStaticPaths() {
  const allVideos: VideoData[] = await getAllVideos();
  const videosPerPage = 40;

  const paths = [];
  const categories: { [key: string]: VideoData[] } = {};

  allVideos.forEach(video => {
    if (!categories[video.category]) {
      categories[video.category] = [];
    }
    categories[video.category].push(video);
  });

  for (const categoryName in categories) {
    // --- PERUBAHAN KUNCI DI SINI: Acak video di dalam kategori sebelum paginasi ---
    const categoryVideos = categories[categoryName].sort(() => 0.5 - Math.random());
    // -------------------------------------------------------------------------

    const categorySlug = slugify(categoryName);
    const totalPages = Math.ceil(categoryVideos.length / videosPerPage);

    // Pastikan setidaknya ada satu path jika totalPages adalah 0 (untuk kasus kategori kosong)
    if (totalPages === 0) {
      paths.push({
        params: {
          slug: categorySlug,
          page: '1', // Default page 1 meskipun kosong
        },
        props: {
          categoryName,
          currentPage: 1,
          totalPages: 1, // Set totalPages ke 1 jika tidak ada video
          videos: [],
          preconnectDomains: [],
        },
      });
      continue; // Lanjut ke kategori berikutnya
    }


    for (let i = 1; i <= totalPages; i++) {
      const startIndex = (i - 1) * videosPerPage;
      const endIndex = startIndex + videosPerPage;
      const paginatedVideosForPage = categoryVideos.slice(startIndex, endIndex);

      const preconnectDomainsForPage = new Set<string>();
      paginatedVideosForPage.forEach(video => {
        try {
          if (video.thumbnail) {
            preconnectDomainsForPage.add(new URL(video.thumbnail).origin);
          }
          if (video.embedUrl) {
            preconnectDomainsForPage.add(new URL(video.embedUrl).origin);
          }
        } catch (e) {
          console.error(`URL tidak valid untuk video ID "${video.id}" di kategori "${video.category}" (paginasi kategori):`, e);
        }
      });

      paths.push({
        params: {
          slug: categorySlug,
          page: i.toString(),
        },
        props: {
          categoryName,
          currentPage: i,
          totalPages,
          videos: paginatedVideosForPage,
          preconnectDomains: Array.from(preconnectDomainsForPage),
        },
      });
    }
  }
  return paths;
}

const { categoryName, currentPage, totalPages, videos: paginatedVideos, preconnectDomains } = Astro.props;

const pageCanonicalUrl = Astro.url.href;

const breadcrumbs = [
  { name: 'Home', url: `${url}` },
  { name: 'Category', url: `${url}/category/` },
  { name: `${categoryName} | Page ${currentPage}`, url: null },
];
---

<Layout
  title={`${categoryName} | Page ${currentPage} | ${nama}`}
  description={`Kumpulan video category ${categoryName}, page ${currentPage} dari ${totalPages} di ${nama}.`}
  preconnectDomains={preconnectDomains}
>
  <main class="category-page" itemscope itemtype="http://schema.org/CollectionPage">
    <nav class="breadcrumb" aria-label="breadcrumb" itemscope itemtype="http://schema.org/BreadcrumbList">
      <ol>
        {breadcrumbs.map((item, index) => (
          <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
            {index > 0 && <span class="separator">/</span>}
            {item.url ? (
              <a itemprop="item" href={item.url}>
                <span itemprop="name">{item.name}</span>
              </a>
            ) : (
              <span itemprop="name">{item.name}</span>
            )}
            <meta itemprop="position" content={(index + 1).toString()} />
          </li>
        ))}
      </ol>
    </nav>

    <h1 class="category-title-header" itemprop="headline">{categoryName} - page {currentPage}</h1>

    {paginatedVideos.length === 0 ? (
      <p class="no-videos-in-category">Tidak ada video yang ditemukan dalam kategori ini.</p>
    ) : (
      <div class="video-grid">
        {paginatedVideos.map((video) => (
          <VideoCard video={video} videoDetailPath={`/${slugify(video.title)}-${video.id}`} />
        ))}
      </div>
    )}

    {totalPages > 1 && (
      <nav class="pagination" aria-label="Navigasi Page Kategori">
        {currentPage > 1 && (
          <a href={`${url}/category/${slugify(categoryName)}/${currentPage - 1}`} class="pagination-link">&laquo; Sebelumnya</a>
        )}
        {Array.from({ length: totalPages }, (_, i) => i + 1)
          .filter(p =>
            p === 1 || p === totalPages || (p >= currentPage - 2 && p <= currentPage + 2)
          )
          .map((pageNumber, index, array) => (
            <>
              {pageNumber > 1 && array[index - 1] && pageNumber - array[index - 1] > 1 && (
                <span class="pagination-link ellipsis">...</span>
              )}
              <a
                href={`${url}/category/${slugify(categoryName)}/${pageNumber}`}
                class={`pagination-link ${pageNumber === currentPage ? 'active' : ''}`}
              >
                {pageNumber}
              </a>
            </>
          ))}
        {(currentPage + 2 < totalPages && totalPages > 5 && currentPage < totalPages - 2) && (
          <span class="pagination-link ellipsis">...</span>
        )}
        {currentPage < totalPages && (
          <a href={`${url}/category/${slugify(categoryName)}/${currentPage + 1}`} class="pagination-link">Berikutnya &raquo;</a>
        )}
      </nav>
    )}
  </main>
</Layout>