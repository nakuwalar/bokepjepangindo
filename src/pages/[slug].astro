---
// src/pages/[slug].astro

import Layout from '../layouts/BaseLayout.astro';
import VideoCard from '../components/VideoCard.astro';
import { getAllVideos, type VideoData } from '../utils/data';
import { slugify } from '../utils/slugify';
import { nama, url, terbit } from '../utils/site.ts';

export const prerender = true;

export async function getStaticPaths() {
  const allVideos: VideoData[] = await getAllVideos();
  return allVideos.map(video => ({
    params: { slug: `${slugify(video.title)}-${video.id}` },
    props: { video, allVideos },
  }));
}

const { video, allVideos } = Astro.props;

const numberOfRelatedVideos = 16;
let relatedVideos: VideoData[] = []; // Gunakan `let` karena akan diisi bertahap

// 1. Persiapan kata kunci dari judul video saat ini
const currentVideoTitleKeywords = video.title
  .toLowerCase()
  .split(/\s+/)
  .filter(word => word.length > 2 && !['bokep', 'video', 'jepang', 'indo', 'yang', 'dan', 'di', 'ini', 'itu', 'dengan'].includes(word)); // Filter kata umum

// 2. Buat daftar video kandidat untuk terkait, kecuali video saat ini
const candidateVideos = allVideos.filter(v => v.id !== video.id);

// 3. Beri skor setiap video kandidat berdasarkan relevansi
const scoredCandidates = candidateVideos.map(v => {
  let score = 0;
  const otherVideoTitle = v.title.toLowerCase();

  // Prioritas 1: Kategori yang sama
  if (v.category === video.category) {
    score += 100; // Beri skor tinggi untuk kategori yang sama
  }

  // Prioritas 2: Cocokkan kata kunci di judul
  currentVideoTitleKeywords.forEach(keyword => {
    if (otherVideoTitle.includes(keyword)) {
      score += 5; // Tambah skor untuk setiap kata kunci yang cocok
    }
  });

  return { video: v, score };
});

// 4. Urutkan kandidat berdasarkan skor (tertinggi ke terendah)
// Jika skor sama, acak urutannya untuk variasi
scoredCandidates.sort((a, b) => {
  if (b.score === a.score) {
    return 0.5 - Math.random(); // Acak jika skor sama
  }
  return b.score - a.score; // Urutkan berdasarkan skor tertinggi
});

// 5. Ambil video terkait dari daftar yang sudah diurutkan
// Pastikan tidak ada duplikasi ID
const addedVideoIds = new Set<string>();
for (const scoredV of scoredCandidates) {
  if (relatedVideos.length >= numberOfRelatedVideos) {
    break;
  }
  if (!addedVideoIds.has(scoredV.video.id)) {
    relatedVideos.push(scoredV.video);
    addedVideoIds.add(scoredV.video.id);
  }
}

// 6. Jika masih kurang dari numberOfRelatedVideos, tambahkan video acak
if (relatedVideos.length < numberOfRelatedVideos) {
  const remainingSlots = numberOfRelatedVideos - relatedVideos.length;
  const otherVideosForRandom = allVideos.filter(v => 
    v.id !== video.id && !addedVideoIds.has(v.id)
  );
  const shuffledOthersForRandom = otherVideosForRandom.sort(() => 0.5 - Math.random());
  relatedVideos.push(...shuffledOthersForRandom.slice(0, remainingSlots));
}

// Tidak perlu pengacakan terakhir `relatedVideos.sort(() => 0.5 - Math.random());`
// karena kita sudah melakukan pengacakan saat skor sama dan saat mengisi slot kosong.

// --- Logika untuk Random Videos (terpisah dari related videos) ---
const numberOfRandomVideos = 16; // Jumlah video acak yang berbeda di bagian bawah

const currentAndRelatedVideoIds = new Set([video.id, ...relatedVideos.map(v => v.id)]);

const videosForRandomSelection = allVideos.filter(v => !currentAndRelatedVideoIds.has(v.id));

const randomVideos = videosForRandomSelection
  .sort(() => 0.5 - Math.random())
  .slice(0, numberOfRandomVideos);

// --- Logika preconnect Domains ---
const allDomains = new Set<string>();
try {
  if (video.thumbnail) allDomains.add(new URL(video.thumbnail).origin);
  if (video.embedUrl) allDomains.add(new URL(video.embedUrl).origin);
} catch (e) {
  console.error(`URL thumbnail/video tidak valid untuk video ID ${video.id} (current video):`, e);
}

relatedVideos.forEach(v => {
  try {
    if (v.thumbnail) allDomains.add(new URL(v.thumbnail).origin);
    if (v.embedUrl) allDomains.add(new URL(v.embedUrl).origin);
  } catch (e) {
    console.error(`URL thumbnail/video tidak valid untuk video ID ${v.id} (related video):`, e);
  }
});

randomVideos.forEach(v => {
  try {
    if (v.thumbnail) allDomains.add(new URL(v.thumbnail).origin);
    if (v.embedUrl) allDomains.add(new URL(v.embedUrl).origin);
  } catch (e) {
    console.error(`URL thumbnail/video tidak valid untuk video ID ${v.id} (random video):`, e);
  }
});

const preconnectDomains = Array.from(allDomains);

const breadcrumbs = [
  { name: 'Home', url: `${url}` },
  { name: video.category, url: `${url}/category/${slugify(video.category)}/1` },
  { name: video.title },
];

const datePublished = video.datePublished || terbit;
const dateModified = video.dateModified || new Date().toISOString();

const schemaWebPage = {
  "@context": "https://schema.org",
  "@type": "WebPage",
  "url": `${url}/${slugify(video.title)}-${video.id}/`,
  "name": `${video.title}`,
  "description": `${video.description} di ${nama}`,
  "publisher": {
    "@type": "Organization",
    "name": nama,
    "logo": {
      "@type": "ImageObject",
      "url": `${url}/logo.png`
    }
  },
  "datePublished": datePublished,
  "dateModified": dateModified
};

const schemaVideoObject = {
  "@context": "https://schema.org",
  "@type": "VideoObject",
  "name": video.title,
  "description": `${video.description} di ${nama}`,
  "uploadDate": datePublished,
  "embedUrl": video.embedUrl,
  "thumbnailUrl": video.thumbnail,
  "publisher": {
    "@type": "Organization",
    "name": nama,
    "logo": {
      "@type": "ImageObject",
      "url": `${url}/logo.png`
    }
  },
};

const schemaBreadcrumb = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": breadcrumbs.map((item, index) => ({
    "@type": "ListItem",
    "position": index + 1,
    "name": item.name,
    ...(item.url && { "item": item.url })
  }))
};
---

<Layout
  title={`${video.title} - ${nama}`}
  description={`${video.description} di ${nama}`}
  preconnectDomains={preconnectDomains}
  siteName={nama}
  siteUrl={url}
>
  <script type="application/ld+json" set:html={JSON.stringify(schemaWebPage)} />
  <script type="application/ld+json" set:html={JSON.stringify(schemaVideoObject)} />
  <script type="application/ld+json" set:html={JSON.stringify(schemaBreadcrumb)} />

  <main class="video-detail-page">
    <nav class="breadcrumb" aria-label="breadcrumb">
      <ol>
        {breadcrumbs.map((item, index) => (
          <li>
            {index > 0 && <span class="separator">/</span>}
            {item.url ? (
              <a href={item.url}>
                <span>{item.name}</span>
              </a>
            ) : (
              <span>{item.name}</span>
            )}
          </li>
        ))}
      </ol>
    </nav>

    <div class="video-player-container">
      <iframe
        src={video.embedUrl}
        frameborder="0"
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowfullscreen
        loading="eager"
        width="100%"
        height="300"
        title={video.title}
      ></iframe>
    </div>
    <h1 class="video-title">{video.title}</h1>

    <script type="text/javascript" src="https://js.juicyads.com/jp.php?c=947403z2v256s2x2w2e4z2e4&u=https%3A%2F%2Fwww.juicyads.rocks"></script>
    <script type="text/javascript">      var juicy_tags = ['a', 'img'];    </script>
    <script type="text/javascript" src="https://js.juicyads.com/jp.php?c=947403z2v256s2x2w2e4z2e4&u=https%3A%2F%2Fwww.juicyads.rocks"></script>
    <div class="juicyads-ad-container" style="min-height: 300px; width: 100%; display: flex; justify-content: center; align-items: center; background-color: var(--card-bg); border-radius: var(--border-radius-medium); margin-bottom: var(--spacing-unit);">
      <ins id="1055940" data-width="308" data-height="298"></ins>
      <script type="text/javascript" data-cfasync="false" async>(adsbyjuicy = window.adsbyjuicy || []).push({'adzone':1055940});</script>
    </div>

    <p class="video-description">{video.description}</p>
  
    {relatedVideos.length > 0 && (
      <section class="related-videos-section">
        <h2 class="section-title">Video Terkait {video.title}</h2>
        <div class="video-grid">
          {relatedVideos.map((relatedVideo) => (
            <VideoCard video={relatedVideo} videoDetailPath={`/${slugify(relatedVideo.title)}-${relatedVideo.id}/`} headingLevel="h3" />
          ))}
        </div>
      </section>
    )}
    
    {randomVideos.length > 0 && (
      <section class="random-videos-section">
        <div class="juicyads-ad-container" style="min-height: 300px; width: 100%; display: flex; justify-content: center; align-items: center; background-color: var(--card-bg); border-radius: var(--border-radius-medium); margin-bottom: var(--spacing-unit);">
          <script type="text/javascript" data-cfasync="false" async src="https://poweredby.jads.co/js/jads.js"></script>
          <ins id="1055940" data-width="308" data-height="298"></ins>
          <script type="text/javascript" data-cfasync="false" async>(adsbyjuicy = window.adsbyjuicy || []).push({'adzone':1055940});</script>
        </div>
        <h2 class="section-title">Video Pilihan</h2>
        <div class="video-grid">
          {randomVideos.map((randomVideo) => (
            <VideoCard video={randomVideo} videoDetailPath={`/${slugify(randomVideo.title)}-${randomVideo.id}/`} headingLevel="h3" />
          ))}
        </div>
      </section>
    )}
  </main>
</Layout>