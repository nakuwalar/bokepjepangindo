---
// src/pages/index.astro
import Layout from '../layouts/BaseLayout.astro';
import VideoCard from '../components/VideoCard.astro';
import { slugify } from '../utils/slugify';
import { getAllVideos, type VideoData } from '../utils/data';
import { nama, desk, url, terbit } from '../utils/site.ts';
export const prerender = true;

const allVideos: VideoData[] = await getAllVideos();

const videosByCategory: { [key: string]: VideoData[] } = {};
const numberOfVideosPerCategory = 16; // Jumlah video acak yang ingin ditampilkan per kategori

allVideos.forEach(video => {
  if (!videosByCategory[video.category]) {
    videosByCategory[video.category] = [];
  }
  // Tidak perlu membatasi di sini, kita akan mengacak dan mengambil di bawah
  videosByCategory[video.category].push(video);
});

// --- PERUBAHAN KUNCI DI SINI: Acak video di SETIAP kategori ---
const finalVideosByCategory: { [key: string]: VideoData[] } = {};
const allCategoryNames = Object.keys(videosByCategory);

allCategoryNames.forEach(categoryName => {
  const videosInThisCategory = videosByCategory[categoryName];
  
  // Acak video di dalam kategori ini
  const shuffledVideosInThisCategory = videosInThisCategory
    .sort(() => 0.5 - Math.random());
  
  // Ambil sejumlah video acak yang diinginkan
  finalVideosByCategory[categoryName] = shuffledVideosInThisCategory.slice(0, numberOfVideosPerCategory);
});


const sortedCategories = Object.keys(finalVideosByCategory).sort(); // Urutkan kategori secara alfabetis untuk tampilan


const numberOfRandomVideos = 16;

const categoryVideoIds = new Set(
  Object.values(finalVideosByCategory).flat().map(v => v.id) // Gunakan finalVideosByCategory
);

const videosForRandomSelection = allVideos.filter(video =>
  !categoryVideoIds.has(video.id)
);

const randomVideos = videosForRandomSelection
  .sort(() => 0.5 - Math.random())
  .slice(0, numberOfRandomVideos);

const allDomains = new Set<string>();

Object.values(finalVideosByCategory).flat().forEach(video => { // Gunakan finalVideosByCategory
  try {
    if (video.thumbnail) {
      allDomains.add(new URL(video.thumbnail).origin);
    }
    if (video.embedUrl) {
      allDomains.add(new URL(video.embedUrl).origin);
    }
  } catch (e) {
    console.error(`[ERROR] URL thumbnail/video tidak valid untuk video ID ${video.id} (videosByRandomCategory):`, e);
  }
});

randomVideos.forEach(video => {
  try {
    if (video.thumbnail) {
      allDomains.add(new URL(video.thumbnail).origin);
    }
    if (video.embedUrl) {
      allDomains.add(new URL(video.embedUrl).origin);
    }
  } catch (e) {
    console.error(`[ERROR] URL thumbnail/video tidak valid untuk video ID ${video.id} (randomVideos):`, e);
  }
});

const preconnectDomains = Array.from(allDomains);

const breadcrumbs = [
  { name: 'Home', url: `${url}` },
];

const currentUrl = url;
const siteName = nama;
const siteDescription = desk;


---

<Layout
  title={`${nama} - Video Bokep Indo Terbaru`}
  description={siteDescription}
  preconnectDomains={preconnectDomains}
  siteName={siteName}
  siteUrl={currentUrl}
>

  <main class="home-page" itemscope itemtype="http://schema.org/WebPage">
    <meta itemprop="url" content={currentUrl} />
    <meta itemprop="name" content={`${nama} - Video Bokep Indo Terbaru`} />
    <meta itemprop="description" content={desk} />
    <div itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content={siteName} />
      <div itemprop="logo" itemscope itemtype="http://schema.org/ImageObject">
        <meta itemprop="url" content={`${currentUrl}/logo.png`} />
      </div>
    </div>
    <meta itemprop="datePublished" content={terbit}/>
    <meta itemprop="dateModified" content={new Date().toISOString()} />

    <section class="hero-section">
      <h1 itemprop="headline">Selamat Datang di {nama}!</h1>
      <p itemprop="description">{desk} Tonton Sekarang Juga!</p>
    </section>

      <section class="random-videos-section">
    {randomVideos.length > 0 && (
        <h2 class="section-title">Video Pilihan</h2><div class="video-grid">
          {randomVideos.map((video) => (
            <VideoCard video={video} />
          ))}
        </div>
      </section>
    )}

<section class="all-categories-section">
      {sortedCategories.length === 0 ? (
        <p class="no-videos-overall">Belum ada video yang tersedia di portal ini.</p>
      ) : (
        // Menggunakan sortedCategories dan finalVideosByCategory
        sortedCategories.map(categoryName => (
          <div class="category-group">
            <h2 class="category-title">
              <a href={`${currentUrl}/category/${slugify(categoryName)}/1`} class="category-link">
                {categoryName} &rarr;</a>
            </h2>
            <div class="video-grid">
              {finalVideosByCategory[categoryName].length === 0 ? (
                <p class="no-videos-in-category">Tidak ada video dalam kategori ini.</p>
              ) : (
                finalVideosByCategory[categoryName].map((video) => (
                  <VideoCard video={video} />
                ))
              )}
            </div>
            {videosByCategory[categoryName].length > numberOfVideosPerCategory && ( // Cek dari videosByCategory (yang asli, lengkap)
              <div class="view-all-button-container">
                <a href={`${currentUrl}/category/${slugify(categoryName)}/1`} class="view-all-button">Lihat Semua di kategori {categoryName}</a>
              </div>
            )}
          </div>
        ))
      )}
    </section>
  </main>
</Layout>