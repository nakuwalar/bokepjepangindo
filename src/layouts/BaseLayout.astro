---
import { nama, desk, url } from '../utils/site.ts';

export interface Props {
  title: string;
  description: string;
  preconnectDomains?: string[];
  siteName?: string;
  siteUrl?: string;
}

const {
  title,
  description,
  preconnectDomains = [],
  siteName = nama,
} = Astro.props;
const currentUrl = url;
const siteDescription = desk;

const ogImageFullUrl = new URL('/logo.png', url).href;

const websiteSchema = {
  "@context": "http://schema.org",
  "@type": "WebSite",
  "name": siteName,
  "url": currentUrl,
  "description": siteDescription,
  "potentialAction": {
    "@type": "SearchAction",
    "target": `${currentUrl}/video/{search_term_string}`,
    "query-input": "required name=search_term_string"
  }
};

const organizationSchema = {
  "@context": "http://schema.org",
  "@type": "Organization",
  "name": siteName,
  "url": currentUrl,
  "logo": `${currentUrl}/logo.png`,
  "description": siteDescription,
  "sameAs": []
};

const jsonLdSchemas = [
  websiteSchema,
  organizationSchema
];
---

<!doctype html>
<html lang="id">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="robots" content="index, follow" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:type" content="website" />
    <meta property="og:image" content={ogImageFullUrl} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={ogImageFullUrl} />
    <meta name="google-site-verification" content="HfSHNFlK3vNF2q4lmp1SuBlr0df9_OZcs7RKdifrKtU" />
    <meta name="yandex-verification" content="91b6eb07866502b3" />
    {preconnectDomains.map(domain => (
      <link rel="preconnect" href={domain} crossorigin>
    ))}
  <script type="application/ld+json" set:html={JSON.stringify(jsonLdSchemas)} />

    <link rel="stylesheet" href="/global.css" />
  </head>
  <body>
    <header>
      <nav class="main-nav">
        <a href="/" class="logo">{siteName}</a>
        <form id="searchForm" action="/video/" method="get" class="search-form">
          <input type="search" name="query" placeholder="Cari video..." required />
          <button type="submit">Cari</button>
        </form>
        <ul class="nav-links">
          <li><a href="/">Home</a></li>
          <li><a href="/category/">Category</a></li>
          <li>
            <button id="darkModeToggle" class="dark-mode-toggle" aria-label="Toggle dark mode">‚òÄÔ∏è</button>
          </li>
        </ul>
      </nav>
    </header>

    <slot />

    <footer>
      <p>&copy; {new Date().getFullYear()} {siteName}. All rights reserved.</p>
    </footer>

    <script is:inline>document.addEventListener('DOMContentLoaded',()=>{const searchForm=document.getElementById('searchForm');if(searchForm){searchForm.addEventListener('submit',function(event){event.preventDefault();const input=searchForm.querySelector('input[name="query"]');const query=input?input.value.trim():'';if(query){const slugifiedQuery=query.toLowerCase().replace(/\s+/g,'-');window.location.href=`/video/${ slugifiedQuery }`}else{window.location.href=`/video/`}})}const toggleButton=document.getElementById('darkModeToggle');const body=document.body;const LIGHT_ICON='‚òÄÔ∏è';const DARK_ICON='üåô';const STORAGE_KEY='darkModeEnabled';function applyTheme(isDarkMode){if(isDarkMode){body.classList.add('dark-mode');toggleButton.textContent=DARK_ICON}else{body.classList.remove('dark-mode');toggleButton.textContent=LIGHT_ICON}}const savedMode=localStorage.getItem(STORAGE_KEY);if(savedMode==='true'){applyTheme(true)}else if(savedMode===null&&window.matchMedia('(prefers-color-scheme: dark)').matches){applyTheme(true)}else{applyTheme(false)}if(toggleButton){toggleButton.addEventListener('click',()=>{const isCurrentlyDarkMode=body.classList.contains('dark-mode');const newMode=!isCurrentlyDarkMode;applyTheme(newMode);localStorage.setItem(STORAGE_KEY,newMode)})}});</script>
  </body>
</html>
